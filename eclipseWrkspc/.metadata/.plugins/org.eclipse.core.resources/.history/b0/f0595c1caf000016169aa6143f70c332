package videomap;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.ServerSocket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class ImageServer {
	private int port;
	private String address;
	private String pattern;
	private File folder;
	private File[] filesToSend;
	private int clientsNumber;
	private ServerSocket server;
	private List<ClientHandler> clients;
	private int waitingTime;
	
	public ImageServer(String address, int port, String folder) {
		setAddress(address);
		setPort(port);
		setFolder(folder);
		clients = new ArrayList<>();
	}
	
	public ImageServer(String folder) {
		try {
			setAddress(Inet4Address.getLocalHost().getHostAddress());
		} catch (UnknownHostException e) {
			System.out.println("Invalid adress");
			e.printStackTrace();
		}
		setPort(8888);
		setFolder(folder);
		clients = new ArrayList<>();
	}
	
	public ImageServer() {
		try {
			setAddress(Inet4Address.getLocalHost().getHostAddress());
		} catch (UnknownHostException e) {
			System.out.println("Invalid adress");
			e.printStackTrace();
		}
		setPort(8888);
		setFolder("data" + File.separatorChar);
		clients = new ArrayList<>();
	}
	
	public void start() {
		boolean listening = true;
		try  {
			server = new ServerSocket(port);
			System.out.println("Image server at: " + this.address);
			System.out.println("Transmiting on port: " + this.port);
			System.out.println("Looking at folder: " + this.folder.getAbsolutePath());
			updateFileList();
			System.out.println("There are " + filesToSend.length + " files");
            while (listening) {
	           	//This is the magic, waits until new client
	            ClientHandler client = new ClientHandler(server.accept(), filesToSend.length);
	                
	            //Add client to collection
	            addClient(client);
	            //Loop the collection serving as long as we had client
	            updateFileList();
	            client.setFilesToSend(filesToSend);
	            	
	        	client.start();
	            	            
	           //termination criteria
	            if (!hasClients()) {
	            	System.out.println("No more clients shouting down server...");
	            	listening = false;
	            }
            }
        } catch (IOException e) {
            System.err.println("Could not listen on port " + port);
            System.exit(-1);
        }
	}
	
	private void addClient(ClientHandler handler) {
		if (handler != null) {
			clients.add(handler);
			clientsNumber++;
			System.out.println("New client conected");
		}
	}
	
	@SuppressWarnings("unused")
	private void serve(ClientHandler client) {
		int index = 0;
		try {
			
			index = client.nextElement();
			client.sendFile(filesToSend[index]);
			
		} catch (IOException e) {
			System.out.println("Could not sent the file: " + filesToSend[index].getAbsolutePath());
			e.printStackTrace();
		}
	}
	
	public void stop() throws IOException {
		server.close();
	}
	
	
	public boolean hasClients() {
		return clientsNumber != 0;
	}
	
	public int getClientsNumber() {
		return clientsNumber;
	}
	
	public int getPort() {
		return port;
	}
	
	public String getAddress() {
		return address;
	}
	
	public String getFolder() {
		return folder.getAbsolutePath();
	}
	
	public String getPattern() {
		return pattern;
	}
	
	private void setPort(int port) {
		if (port > 1024 && port < 65000) {
			this.port = port;
		}
	}
	
	private void setAddress(String addres) {		
		final String IPADDRESS_PATTERN = 
				"^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
				"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
				"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
				"([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
		final Pattern pattern = Pattern.compile(IPADDRESS_PATTERN);
	    if (addres != null && pattern.matcher(addres).matches()) {
	        this.address = addres;
	    }
	}
	
	private void setFolder (String folder) {
		if (folder == null) {
			System.out.println("Invalid folder");
			return;
		}
		File file = new File(folder);
		if (file.exists() && file.canRead()) {
			this.folder = new File(folder);
		}
	}
	
	public void setPattern(String pattern) {
		this.pattern = pattern;
	}
	
	private void updateFileList() {
		if (folder.isDirectory()) {
			filesToSend = folder.listFiles(IMAGE_FILTER);
		}
	}
	
	static final FilenameFilter IMAGE_FILTER = new FilenameFilter() {
		final String[] EXTENSIONS = new String[]{
		        "png" // and other formats you need
		    };
        @Override
        public boolean accept(final File dir, final String name) {
            for (final String ext : EXTENSIONS) {
                if (name.endsWith("." + ext)) {
                    return (true);
                }
            }
            return (false);
        }
    };
}
